/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package reversi_gui;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.*;
import java.math.BigDecimal;
import java.net.Socket;
import java.util.HashSet;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static reversi_gui.Reversi_gui.board;

/**
 *
 * @author Class2015
 */
public class Reversi_board extends javax.swing.JFrame implements MouseListener {
    public Thread send;
    public Thread receive;
    public Socket s;
    public BufferedReader in;
    public PrintWriter out;
    public BufferedReader sysin;
    public int x_location;
    public int y_location;
    public ImageIcon background_image = new javax.swing.ImageIcon(getClass().getResource("/image/chessboard.jpg"));
    public javax.swing.JLabel [] all_cells  = new javax.swing.JLabel [64];
    public char my_color;
    public char [][] board_from_server = new char[8][8];
    public boolean set_up_flag= false;
    public boolean my_turn;
    public Ai ai = new Ai();
//this is to send string to server 
    public void sendToServer(PrintWriter out,String input){
        out.println(input);
        out.flush();
    }
    /**
     * Creates new form Reversi_board
     */
    public Reversi_board() {
        for(int i =0; i< 64;i++){
            all_cells[i]= new javax.swing.JLabel();
            getContentPane().add(all_cells[i]);
//            all_cells[i].setBounds(62*(i%7), 500-(62*(i/7)), 60, 60);
//            all_cells[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/black_disc_副本.png"))); // NOI18N
        }
        initComponents();
        board_base.setOpaque(false);
       
        this.addMouseListener(this);
        for(int i =0; i< 64;i++){
//            all_cells[i]= new javax.swing.JLabel();
            //getContentPane().add(all_cells[i]);
            all_cells[i].setBounds(62*(i/8), 440-(62*(i%8)), 60, 60);
            //all_cells[i].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/black_disc_副本.png"))); // NOI18N
        }
        

//         MouseListenerTest m = new MouseListenerTest();
//         m.setup();
    }

    //for debug
    public void print_board(){
        for (int i =0 ;i < 8; i++){
            for (int j =0 ; j < 8 ;j++){
                System.out.print(board_from_server[i][j]+" ");
            }
            System.out.println("");
        }
    }
    
    public int count_cells(char color){
            int count = 0;
            for (int i =0; i< 8 ; i++){
                for (int j= 0; j < 8 ;j ++){
                    if(board_from_server[i][j] == color){
                        count++;
                    }
                    
                }
            }
            return count;
     }
    
    //show board by the input from server
    public void show_board(){
        for (int i =0 ;i < 8; i++){
            for (int j =0 ; j < 8 ;j++){
                if(board_from_server[i][j] == '0'){
                    all_cells[i*8+j].setIcon(null);
                }
                else if (board_from_server[i][j] == '2'){
                    all_cells[i*8+j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/black_disc_副本.png")));
                }
                else {
                    all_cells[i*8+j].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/white_disc_副本.png")));
                }
            }
        }
        int black_num = count_cells('2');
        int white_num = count_cells('1');
        String temp1 = ""+white_num;
        String temp2 = ""+black_num;
        
        this.white_count_num.setText(temp1);
        this.black_count_num.setText(temp2);
    }
    
    public char[][] convert_string_to_board_array(String s){
        String temp_string = s.substring(1); //get rid of B
        System.out.println(temp_string);
        for (int i =0 ;i < 8; i++){
            for (int j =0 ; j < 8 ;j++){
                board_from_server[j][i]=temp_string.charAt(i*8+j);
            }
        }
        return board_from_server;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        IP = new javax.swing.JTextField();
        ip_label = new javax.swing.JLabel();
        port_lable = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        connected_label = new javax.swing.JLabel();
        connect_to_server = new javax.swing.JButton();
        black_points = new javax.swing.JLabel();
        white_points = new javax.swing.JLabel();
        player_name = new javax.swing.JTextField();
        set_player_name = new javax.swing.JButton();
        board_base = new javax.swing.JLabel();
        white_count_num = new javax.swing.JTextField();
        black_count_num = new javax.swing.JTextField();

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Reversi");
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(0, 0, 0));
        getContentPane().setLayout(null);
        getContentPane().add(IP);
        IP.setBounds(540, 270, 90, 20);

        ip_label.setText("IP");
        getContentPane().add(ip_label);
        ip_label.setBounds(510, 270, 30, 30);

        port_lable.setText("port");
        getContentPane().add(port_lable);
        port_lable.setBounds(510, 304, 40, 20);

        port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portActionPerformed(evt);
            }
        });
        getContentPane().add(port);
        port.setBounds(540, 300, 90, 20);
        getContentPane().add(connected_label);
        connected_label.setBounds(530, 370, 75, 18);

        connect_to_server.setText("connect");
        connect_to_server.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect_to_serverActionPerformed(evt);
            }
        });
        getContentPane().add(connect_to_server);
        connect_to_server.setBounds(530, 340, 71, 23);

        black_points.setText("black");
        getContentPane().add(black_points);
        black_points.setBounds(534, 40, 40, 14);

        white_points.setText("white");
        getContentPane().add(white_points);
        white_points.setBounds(536, 70, 40, 14);

        player_name.setText("NPlayer");
        player_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player_nameActionPerformed(evt);
            }
        });
        getContentPane().add(player_name);
        player_name.setBounds(530, 410, 100, 20);

        set_player_name.setText("set");
        set_player_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_player_nameActionPerformed(evt);
            }
        });
        set_player_name.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
                set_player_nameAncestorResized(evt);
            }
        });
        getContentPane().add(set_player_name);
        set_player_name.setBounds(530, 440, 90, 23);

        board_base.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/chessboard.jpg"))); // NOI18N
        getContentPane().add(board_base);
        board_base.setBounds(0, 0, 500, 500);

        white_count_num.setText("0");
        getContentPane().add(white_count_num);
        white_count_num.setBounds(570, 70, 60, 20);

        black_count_num.setText("0");
        getContentPane().add(black_count_num);
        black_count_num.setBounds(570, 40, 60, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portActionPerformed

    private void connect_to_serverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect_to_serverActionPerformed
        Thread work = new Thread();
        ai.connect_to_server(this.IP.getText(), this.port.getText());
//        try{
//        String IP_add = this.IP.getText();
//        int port_number = Integer.parseInt(this.port.getText());
//         
//
//            s = new Socket(IP_add,port_number);
//             //socket input
//             in = new BufferedReader(new InputStreamReader(s.getInputStream()));
//
//         //socket output
//             out = new PrintWriter(s.getOutputStream());
//
//                 //standard input
//             sysin = new BufferedReader(new InputStreamReader(System.in));   
//
//             //establish two threads
////              send = new Thread(new SendThread(sysin,out));
////             receive = new Thread(new ReceiveThread(in));
////
////             send.start();
////             receive.start();
            
             this.connected_label.setText("server connected");
             this.connect_to_server.setEnabled(false);
//       }
//       catch(Exception e){
//           JOptionPane.showMessageDialog(this, "bad input", "error", JOptionPane.ERROR_MESSAGE);
//           return;
//       }
      
           
       
       
    }//GEN-LAST:event_connect_to_serverActionPerformed

    private void set_player_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_set_player_nameActionPerformed
        ai.set_player_name(this.player_name.getText());
         this.set_player_name.setEnabled(false);
    }//GEN-LAST:event_set_player_nameActionPerformed

    private void player_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player_nameActionPerformed

    private void set_player_nameAncestorResized(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_set_player_nameAncestorResized
        // TODO add your handling code here:
    }//GEN-LAST:event_set_player_nameAncestorResized

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reversi_board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reversi_board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reversi_board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reversi_board.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               Reversi_board new_game = new Reversi_board();
               new_game.setVisible(true);
//               while(!new_game.set_up_flag){
//                   ;
//               }
//               while(true){
//                                 
//                   try { 
//                       String board_from_server_String = new_game.in.readLine();
//                       System.out.println(board_from_server_String);
//                       new_game.board_from_server= new_game.convert_string_to_board_array(board_from_server_String);
//                       System.out.println("array");
//                       new_game.print_board();
//                       new_game.show_board();
//                       System.out.println(board_from_server_String);
//                       new_game.my_turn = true;
//                   } catch (IOException ex) {
//                       Logger.getLogger(Reversi_board.class.getName()).log(Level.SEVERE, null, ex);
//                   }
//               
//               }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IP;
    private javax.swing.JTextField black_count_num;
    private javax.swing.JLabel black_points;
    private javax.swing.JLabel board_base;
    private javax.swing.JButton connect_to_server;
    private javax.swing.JLabel connected_label;
    private javax.swing.JLabel ip_label;
    private java.awt.Panel panel1;
    private javax.swing.JTextField player_name;
    private javax.swing.JTextField port;
    private javax.swing.JLabel port_lable;
    private javax.swing.JButton set_player_name;
    private javax.swing.JTextField white_count_num;
    private javax.swing.JLabel white_points;
    // End of variables declaration//GEN-END:variables
    

    public void mouseClicked(MouseEvent e) {
    
    }


    public void mousePressed(MouseEvent e) {
       
    }
public void change_board_after_click(HashSet<Integer> set){
        Iterator<Integer> set_iterator = set.iterator();
        while(!set_iterator.hasNext()){
            int i=set_iterator.next();
            if(board_from_server[i/8][i%8]=='1'){
                board_from_server[i/8][i%8]='2';
            }
                
            else{
                board_from_server[i/8][i%8]='1';
            }
        }
        
        
    }

    public void mouseReleased(MouseEvent e) {
        if(my_turn){
            x_location= e.getX();

            y_location = e.getY();
            if (x_location >500) x_location=500;
            if (y_location >500) y_location=500;


            System.out.println(x_location);
            System.out.println(y_location);
            //BigDecimal temp = new BigDecimal(x_location/62.0).setScale(0, BigDecimal.ROUND_HALF_UP);
            
           int x_postion = x_location/62;
           BigDecimal temp = new BigDecimal(y_location/62.0).setScale(0, BigDecimal.ROUND_HALF_UP);
           int y_postion = 8 - temp.intValueExact();
           if(my_color =='2'){
                all_cells[x_postion*8+y_postion].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/black_disc_副本.png")));
           }
           else{
               all_cells[x_postion*8+y_postion].setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/white_disc_副本.png")));
           }
           ai.move(x_postion,y_postion);
//            HashSet<Integer> set = ai.update_board(x_postion, y_postion, my_color);
//           change_board_after_click(set);
//           show_board();
//           String send_out = "M"+ (x_postion+y_postion*8);
//            System.out.println(send_out);
//            ai.sendToServer(out, send_out);
           my_turn = false;
        }
    }

  
    public void mouseEntered(MouseEvent e) {
       
    }

   
    public void mouseExited(MouseEvent e) {
      
    }

//    private void start_game() {
//                       
//               while(true){
//                   try { 
//                       String board_from_server_String = in.readLine();
//                       System.out.println(board_from_server_String);
//                       board_from_server= convert_string_to_board_array(board_from_server_String);
//                       System.out.println("array");
//                       print_board();
//                       show_board();
//                       System.out.println(board_from_server_String);
//                       my_turn = true;
//                   } catch (IOException ex) {
//                       Logger.getLogger(Reversi_board.class.getName()).log(Level.SEVERE, null, ex);
//                   }
//               }
//    }

    void gameover() {
        JOptionPane.showMessageDialog(this, "game over #_# ", "game over", JOptionPane.ERROR_MESSAGE);
    }
}

// class MouseListenerTest implements MouseListener{
//     JFrame click_area = new JFrame();
//     int clickedX, clickedY;
//    
//     @Override
//    public void mouseClicked(MouseEvent e) {
//        clickedX= e.getX();
//        clickedY = e.getY();
//        System.out.println(clickedX+"   "+clickedY);
//    }
//
//    
//    public void mousePressed(MouseEvent e) {
//        
//    }
//
//   
//    public void mouseReleased(MouseEvent e) {
//       
//    }
//
//
//    public void mouseEntered(MouseEvent e) {
//       
//    }
//
//
//    public void mouseExited(MouseEvent e) {
//       
//    }
//
//    void setup() {
//       click_area.setVisible(true);
//       click_area.setSize(500, 500);
//       click_area.setBackground(Color.yellow);
//       click_area.addMouseListener(this);
//    }
//    
//}


//class SendThread implements Runnable
//{
//	public BufferedReader sysin;
//	PrintWriter out;
//	public SendThread(BufferedReader si,PrintWriter o)
//	{
//		sysin = si;
//		out = o;
//	}
//	
//	public void run()
//	{
//		try
//		{
//			while(true)
//			{
//				String str=sysin.readLine();   
//				out.println(str);   
//				out.flush();   
//			}
//		}
//		catch(Exception e)
//		{
//			e.printStackTrace();
//		}
//	}
//}
//
//class ReceiveThread implements Runnable
//{
//	public BufferedReader in;
//	public ReceiveThread(BufferedReader br)
//	{
//		in=br;
//	}
//	public void run()
//	{
//		try
//		{
//			while(true)
//			{
//				System.out.println(in.readLine()); 
//			}
//		}
//		catch(Exception e)
//		{
//			e.printStackTrace();
//		}
//	}
//}